import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
  }, [employees]);

  // Update salary data based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = payrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = payrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = payrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = payrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = payrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
  }, [payrollData, user?.id, role]);

  // Update payment statuses based on real payroll data
  useEffect(() => {
    if (payrollData && Array.isArray(payrollData) && payrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...payrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = employees && Array.isArray(employees) ? employees.find(emp => emp.id === payroll.userId) : null;
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
  }, [payrollData, employees]);

  // Update hiring stats based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = employees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  }, [employees]);

  // Function to filter data by date range
  const filterDataByDateRange = (range) => {
    // In a real implementation, this would filter the data based on the selected date range
    console.log('Filtering data by date range:', range);
    
    // For demonstration purposes, we'll update the dashboard metrics based on the date range
    // In a full implementation, this would re-fetch or filter the existing data
    
    // Get current date
    const now = new Date();
    
    // Filter tasks based on date range
    let filteredTasks = tasks;
    let filteredPayrollData = payrollData;
    let filteredEmployees = employees;
    
    if (range === 'this_week') {
      // Calculate start of week (Monday)
      const startOfWeek = new Date(now);
      const day = startOfWeek.getDay();
      const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
      startOfWeek.setDate(diff);
      startOfWeek.setHours(0, 0, 0, 0);
      
      // Calculate end of week (Sunday)
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      endOfWeek.setHours(23, 59, 59, 999);
      
      // Filter tasks created this week
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate >= startOfWeek && createdDate <= endOfWeek;
      });
      
      // Filter payroll data for this month (as payroll is typically monthly)
      filteredPayrollData = payrollData.filter(payroll => {
        // Get the last day of the previous month
        const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    } 
    else if (range === 'this_month') {
      // Filter tasks created this month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === now.getMonth() && createdDate.getFullYear() === now.getFullYear();
      });
      
      // Filter payroll data for this month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (now.getMonth() + 1) && payroll.year === now.getFullYear();
      });
    } 
    else if (range === 'last_month') {
      // Calculate last month
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      
      // Filter tasks created last month
      filteredTasks = tasks.filter(task => {
        const createdDate = new Date(task.createdDate);
        return createdDate.getMonth() === lastMonth.getMonth() && createdDate.getFullYear() === lastMonth.getFullYear();
      });
      
      // Filter payroll data for last month
      filteredPayrollData = payrollData.filter(payroll => {
        return payroll.month === (lastMonth.getMonth() + 1) && payroll.year === lastMonth.getFullYear();
      });
    }
    
    // Update dashboard metrics with filtered data
    updateDashboardMetrics(filteredTasks, filteredPayrollData, filteredEmployees);
  };
  
  // Function to update dashboard metrics with filtered data
  const updateDashboardMetrics = (filteredTasks, filteredPayrollData, filteredEmployees) => {
    // Update work hours data based on filtered task data
    if (filteredTasks && filteredTasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = filteredTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = filteredTasks.filter(task => task.status === 'Completed').length;
      const completionRate = filteredTasks.length > 0 ? Math.round((completedTasks / filteredTasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
</original_code>```

```
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../state/authStore';
import { useTaskStore } from '../../state/taskStore';
import { usePayrollStore } from '../../state/payrollStore';
import { useNavigationStore } from '../../state/navigationStore';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { 
  Clock, 
  Users, 
  Target, 
  Calendar, 
  ChevronRight, 
  Bell, 
  Search,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Award,
  BarChart3,
  PieChart,
  User,
  Briefcase,
  Settings,
  Plus,
  MoreHorizontal,
  X
} from 'lucide-react';
import { Badge } from '../ui/Badge';
import EmployeeProfileCard from './EmployeeProfileCard';

const Dashboard = () => {
  const { user } = useAuthStore();
  const role = user?.role;
  const { tasks, getTasksByStatus, fetchTasks } = useTaskStore();
  const { employees, payrollData, fetchPayrollData } = usePayrollStore();
  const { setCurrentPage } = useNavigationStore();
  const [currentView, setCurrentView] = useState('dashboard');
  
  // State for dropdown menus
  const [salaryCardDropdownOpen, setSalaryCardDropdownOpen] = useState(false);
  const [hiringStatsDropdownOpen, setHiringStatsDropdownOpen] = useState(false);
  const [recentActivityDropdownOpen, setRecentActivityDropdownOpen] = useState(false);
  const [paymentStatusDropdownOpen, setPaymentStatusDropdownOpen] = useState(false);
  const [performanceOverviewDropdownOpen, setPerformanceOverviewDropdownOpen] = useState(false);
  
  // State for date range selection
  const [dateRange, setDateRange] = useState('this_week');
  const [dateRangeOpen, setDateRangeOpen] = useState(false);
  
  // State for team modal
  const [teamModalOpen, setTeamModalOpen] = useState(false);
  const [teamModalData, setTeamModalData] = useState({ title: '', employees: [] });
  
  // Dashboard metrics state
  const [dashboardMetrics, setDashboardMetrics] = useState({
    workHoursData: {
      hours: 0,
      trend: "+0%",
      dots: Array(30).fill(false)
    },
    teamDistribution: {
      onsitePercentage: 0,
      remotePercentage: 0,
      onsiteTrend: "+0%",
      remoteTrend: "+0%"
    },
    paymentStatuses: [],
    salaryData: {
      basicSalary: 0,
      performance: 0,
      gift: 0,
      total: 0
    },
    hiringStats: {
      matched: 0,
      unmatched: 0,
      candidates: []
    }
  });

  // Fetch real data when component mounts
  useEffect(() => {
    // Fetch tasks
    fetchTasks();
    
    // Fetch payroll data
    fetchPayrollData();
  }, [fetchTasks, fetchPayrollData]);

  // Update work hours data based on real task data
  useEffect(() => {
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      // Calculate work hours based on tasks
      const totalHours = tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = tasks.filter(task => task.status === 'Completed').length;
      const completionRate = tasks.length > 0 ? Math.round((completedTasks / tasks.length) * 100) : 0;
      
      // Generate activity dots based on task progress
      const dots = Array(30).fill(false).map((_, i) => {
        // Simulate activity based on task progress
        return Math.random() > 0.7 || (i % 5 === 0 && completionRate > 20);
      });
      
      setDashboardMetrics(prev => ({
        ...prev,
        workHoursData: {
          hours: totalHours,
          trend: `${completionRate >= 50 ? '+' : ''}${Math.round((completionRate - 50) / 10)}%`,
          dots: dots
        }
      }));
    }
  }, [tasks]);

  // Update team distribution based on real employee data
  useEffect(() => {
    if (employees && Array.isArray(employees) && employees.length > 0) {
      const activeEmployees = employees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
    
    // Update team distribution based on filtered employee data
    if (filteredEmployees && filteredEmployees.length > 0) {
      const activeEmployees = filteredEmployees.filter(emp => emp.isActive);
      const onsiteEmployees = activeEmployees.filter(emp => 
        emp.department !== 'Remote' && emp.department !== 'Work From Home'
      );
      const remoteEmployees = activeEmployees.filter(emp => 
        emp.department === 'Remote' || emp.department === 'Work From Home'
      );
      
      const onsitePercentage = activeEmployees.length > 0 ? 
        Math.round((onsiteEmployees.length / activeEmployees.length) * 100) : 0;
      const remotePercentage = activeEmployees.length > 0 ? 
        Math.round((remoteEmployees.length / activeEmployees.length) * 100) : 0;
      
      setDashboardMetrics(prev => ({
        ...prev,
        teamDistribution: {
          onsitePercentage,
          remotePercentage,
          onsiteTrend: "+2.6%",
          remoteTrend: "+2.6%"
        }
      }));
    }
    
    // Update salary data based on filtered payroll data
    if (filteredPayrollData && filteredPayrollData.length > 0) {
      // For team members, show their personal data
      if (user?.id && role === 'team_member') {
        const userPayroll = filteredPayrollData.find(p => p.userId === user.id);
        if (userPayroll) {
          setDashboardMetrics(prev => ({
            ...prev,
            salaryData: {
              basicSalary: userPayroll.baseSalary || 0,
              performance: userPayroll.performanceBonus || 0,
              gift: userPayroll.rewardPointsBonus || 0,
              total: userPayroll.netSalary || 0
            }
          }));
        }
      } 
      // For managers/admins, show company summary
      else if (user?.id && (role === 'manager' || role === 'admin')) {
        // Calculate company-wide payroll summary
        const totalBaseSalary = filteredPayrollData.reduce((sum, p) => sum + (p.baseSalary || 0), 0);
        const totalPerformance = filteredPayrollData.reduce((sum, p) => sum + (p.performanceBonus || 0), 0);
        const totalGift = filteredPayrollData.reduce((sum, p) => sum + (p.rewardPointsBonus || 0), 0);
        const totalNet = filteredPayrollData.reduce((sum, p) => sum + (p.netSalary || 0), 0);
        
        setDashboardMetrics(prev => ({
          ...prev,
          salaryData: {
            basicSalary: totalBaseSalary,
            performance: totalPerformance,
            gift: totalGift,
            total: totalNet
          }
        }));
      }
    }
    
    // Update payment statuses based on filtered payroll data
    if (filteredPayrollData && filteredPayrollData.length > 0) {
      // Get recent payroll records
      const recentPayrolls = [...filteredPayrollData]
        .sort((a, b) => new Date(b.calculatedAt) - new Date(a.calculatedAt))
        .slice(0, 3)
        .map((payroll, index) => {
          const employee = filteredEmployees.find(emp => emp.id === payroll.userId);
          return {
            name: employee ? employee.name : `Employee ${payroll.userId}`,
            amount: payroll.netSalary || 0,
            date: payroll.calculatedAt ? new Date(payroll.calculatedAt).toLocaleDateString() : 'Unknown',
            status: index === 0 ? 'waiting' : index === 1 ? 'done' : 'failed',
            avatar: employee && employee.avatar ? employee.avatar : `https://randomuser.me/api/portraits/${employee?.gender || 'men'}/${payroll.userId % 100}.jpg`
          };
        });
      
      setDashboardMetrics(prev => ({
        ...prev,
        paymentStatuses: recentPayrolls
      }));
    }
    
    // Update hiring stats based on filtered employee data
    if (filteredEmployees && filteredEmployees.length > 0) {
      // For demo purposes, we'll simulate hiring stats based on employee data
      const activeEmployees = filteredEmployees.filter(emp => emp.isActive);
      const recentHires = activeEmployees.filter(emp => {
        const joinDate = new Date(emp.joinDate);
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return joinDate >= thirtyDaysAgo;
      });
      
      const matched = recentHires.length;
      const unmatched = Math.max(0, 100 - matched); // Simulated unmatched count
      
      // Get recent candidate avatars
      const candidateAvatars = activeEmployees
        .slice(0, 3)
        .map(emp => emp.avatar || `https://randomuser.me/api/portraits/${emp.gender || 'men'}/${emp.id % 100}.jpg`);
      
      setDashboardMetrics(prev => ({
        ...prev,
        hiringStats: {
          matched,
          unmatched,
          candidates: candidateAvatars
        }
      }));
    }
  };

  console.log('📋 Dashboard rendering - User:', user, 'Role:', role);

  // Simple error handling
  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background-gray">
        <div className="text-center p-8 bg-white rounded-2xl shadow-lg max-w-md">
          <h2 className="text-danger-red text-xl font-bold mb-4">❌ Authentication Error</h2>
          <p className="text-gray-500 mb-6">No user data found</p>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-primary-green text-white rounded-lg hover:bg-primary-green-light transition-colors"
          >
            Reload Page
          </button>
        </div>
      </div>
    );
  }

  const isManager = role === 'manager' || role === 'admin';
  const dashboardTitle = role === 'admin' ? 'Admin Dashboard' : 
                        role === 'manager' ? 'Manager Dashboard' : 'My Dashboard';

  // Navigation items based on role
  const getNavigationItems = () => {
    const allItems = [
      { id: 'dashboard', label: 'Dashboard', icon: BarChart3, roles: ['team_member', 'manager', 'admin'] },
      { id: 'projects', label: 'Projects', icon: Users, roles: ['manager', 'admin'] },
      { id: 'tasks', label: 'Tasks', icon: CheckCircle, roles: ['team_member', 'manager', 'admin'] },
      { id: 'pomodoro', label: 'Pomodoro', icon: Clock, roles: ['team_member', 'manager', 'admin'] },
      { id: 'attendance', label: 'Attendance', icon: Calendar, roles: ['team_member', 'manager', 'admin'] },
      { id: 'payroll', label: 'Payroll', icon: Briefcase, roles: ['manager', 'admin'] },
      { id: 'employees', label: 'Employees', icon: User, roles: ['manager', 'admin'] },
      { id: 'leaves', label: 'Leaves', icon: Calendar, roles: ['team_member', 'manager', 'admin'] },
      { id: 'rewards', label: 'Rewards', icon: Award, roles: ['team_member'] },
      { id: 'tat', label: 'TAT Timer', icon: Target, roles: ['team_member', 'manager', 'admin'] },
      { id: 'policies', label: 'Policies', icon: Settings, roles: ['manager', 'admin'] },
      { id: 'settings', label: 'Settings', icon: Settings, roles: ['manager', 'admin'] }
    ];
    return allItems.filter(item => item.roles.includes(role));
  };

  // Get statistics based on role
  const getStats = () => {
    if (isManager) {
      const activeTasks = (getTasksByStatus('In Progress')?.length || 0) + (getTasksByStatus('Pending')?.length || 0);
      const completedTasks = getTasksByStatus('Completed')?.length || 0;
      const overdueTasks = tasks?.filter(task => {
        if (task.status === 'Completed') return false;
        return new Date(task.dueDate) < new Date();
      })?.length || 0;
      const teamSize = employees?.filter(emp => emp.isActive)?.length || 0;
      
      return [
        { 
          label: 'Active Tasks', 
          value: activeTasks, 
          icon: CheckCircle, 
          color: 'from-blue-500 to-blue-600',
          change: '+12%',
          changeType: 'positive'
        },
        { 
          label: 'Completed Tasks', 
          value: completedTasks, 
          icon: Award, 
          color: 'from-green-500 to-green-600',
          change: '+8%',
          changeType: 'positive'
        },
        { 
          label: 'Team Size', 
          value: teamSize, 
          icon: Users, 
          color: 'from-amber-500 to-amber-600',
          change: '+2',
          changeType: 'neutral'
        },
        { 
          label: 'Overdue Items', 
          value: overdueTasks, 
          icon: AlertCircle, 
          color: 'from-red-500 to-red-600',
          change: '-3',
          changeType: 'negative'
        }
      ];
    } else {
      const myTasks = tasks?.filter(task => task.assigneeId === user.id) || [];
      const activeTasks = myTasks.filter(task => task.status === 'In Progress' || task.status === 'Pending').length;
      const completedToday = myTasks.filter(task => {
        if (task.status !== 'Completed') return false;
        const completedDate = new Date(task.completedDate);
        const today = new Date();
        return completedDate.getDate() === today.getDate() && 
               completedDate.getMonth() === today.getMonth() && 
               completedDate.getFullYear() === today.getFullYear();
      }).length;
      const totalHours = myTasks.reduce((sum, task) => sum + (task.actualHours || 0), 0);
      const completedTasks = myTasks.filter(task => task.status === 'Completed').length;
      const efficiency = myTasks.length > 0 ? Math.round((completedTasks / myTasks.length) * 100) : 0;
      
      return [
        { 
          label: 'My Tasks', 
          value: activeTasks, 
          icon: CheckCircle, 
          color: 'from-blue-500 to-blue-600',
          change: `+${Math.max(0, activeTasks - 3)}`,
          changeType: 'positive'
        },
        { 
          label: 'Completed Today', 
          value: completedToday, 
          icon: Award, 
          color: 'from-green-500 to-green-600',
          change: `+${completedToday}`,
          changeType: 'positive'
        },
        { 
          label: 'Hours Logged', 
          value: totalHours.toFixed(1), 
          icon: Clock, 
          color: 'from-amber-500 to-amber-600',
          change: `+${(totalHours / 10).toFixed(1)}h`,
          changeType: 'positive'
        },
        { 
          label: 'Efficiency', 
          value: `${efficiency}%`, 
          icon: TrendingUp, 
          color: 'from-cyan-500 to-cyan-600',
          change: `+${Math.max(0, efficiency - 75)}%`,
          changeType: 'positive'
        }
      ];
    }
  };

  const stats = getStats();
  const navigationItems = getNavigationItems();

  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (salaryCardDropdownOpen || hiringStatsDropdownOpen || recentActivityDropdownOpen || 
          paymentStatusDropdownOpen || performanceOverviewDropdownOpen || dateRangeOpen) {
        // Check if click is outside any dropdown
        if (!event.target.closest('.dropdown-container') && !event.target.closest('.date-range-dropdown')) {
          setSalaryCardDropdownOpen(false);
          setHiringStatsDropdownOpen(false);
          setRecentActivityDropdownOpen(false);
          setPaymentStatusDropdownOpen(false);
          setPerformanceOverviewDropdownOpen(false);
          setDateRangeOpen(false);
        }
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [salaryCardDropdownOpen, hiringStatsDropdownOpen, recentActivityDropdownOpen, 
      paymentStatusDropdownOpen, performanceOverviewDropdownOpen, dateRangeOpen]);

  return (
    <div className="min-h-screen bg-background-gray">
      {/* Dashboard Header */}
      <div className="mb-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-surface-dark mb-2">
              {dashboardTitle}
            </h1>
            <p className="text-gray-600">
              Welcome back, {user.name}! Here's your productivity overview.
            </p>
          </div>
          <div className="flex items-center gap-3">
            <div className="relative">
              <button 
                className="flex items-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors"
                onClick={() => {
                  // Toggle date range dropdown
                  setDateRangeOpen(!dateRangeOpen);
                }}
              >
                <Calendar className="w-4 h-4 text-gray-600" />
                <span className="text-sm font-medium text-gray-700">
                  {dateRange === 'this_week' ? 'This Week' : 
                   dateRange === 'this_month' ? 'This Month' : 
                   dateRange === 'last_month' ? 'Last Month' : 'This Week'}
                </span>
                <ChevronRight className="w-4 h-4 text-gray-400" />
              </button>
              
              {/* Date Range Dropdown */}
              {dateRangeOpen && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10 border border-gray-200 date-range-dropdown">
                  <button 
                    onClick={() => {
                      setDateRange('this_week');
                      setDateRangeOpen(false);
                      // Filter data for this week
                      filterDataByDateRange('this_week');
                    }}
                    className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                  >
                    This Week
                  </button>
                  <button 
                    onClick={() => {
                      setDateRange('this_month');
                      setDateRangeOpen(false);
                      // Filter data for this month
                      filterDataByDateRange('this_month');
                    }}
                    className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                  >
                    This Month
                  </button>
                  <button 
                    onClick={() => {
                      setDateRange('last_month');
                      setDateRangeOpen(false);
                      // Filter data for last month
                      filterDataByDateRange('last_month');
                    }}
                    className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                  >
                    Last Month
                  </button>
                </div>
              )}
            </div>
            <button className="flex items-center justify-center w-10 h-10 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
              <MoreHorizontal className="w-5 h-5 text-gray-600" />
            </button>
          </div>
        </div>
        
        {/* Stats Overview */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          {stats.map((stat, index) => {
            const Icon = stat.icon;
            return (
              <Card key={index} className="border-none shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-1">
                <CardContent className="p-5">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-500 font-medium">{stat.label}</p>
                      <p className="text-2xl font-bold text-gray-900 mt-1 hover:text-blue-600 transition-colors duration-200 cursor-pointer">{stat.value}</p>
                    </div>
                    <div className={`w-12 h-12 rounded-xl bg-gradient-to-r ${stat.color} flex items-center justify-center hover:scale-110 transition-all duration-200 cursor-pointer`}>
                      <Icon className="w-6 h-6 text-white" />
                    </div>
                  </div>
                  {stat.change && (
                    <div className={`flex items-center mt-3 text-sm ${
                      stat.changeType === 'positive' ? 'text-green-600 hover:text-green-700' : 
                      stat.changeType === 'negative' ? 'text-red-600 hover:text-red-700' : 'text-gray-500 hover:text-gray-700'
                    } hover:scale-105 transition-all duration-200 cursor-pointer`}>
                      <span>{stat.change}</span>
                      {stat.changeType === 'positive' && (
                        <TrendingUp className="w-4 h-4 ml-1" />
                      )}
                    </div>
                  )}
                </CardContent>
              </Card>
            );
          })}
        </div>
      </div>

      {/* Main Dashboard Content */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Column - Work Hours and Team Distribution */}
        <div className="lg:col-span-1 space-y-6">
          {/* Work Hours Matrix Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <span className="text-lg font-bold text-gray-900">Working Hours</span>
                <div className="p-2 rounded-full bg-blue-100 hover:bg-blue-200 transition-all cursor-pointer active:bg-blue-300">
                  <Clock className="w-5 h-5 text-blue-600" />
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6 pt-2">
              <div className="flex items-end gap-2">
                <span className="text-3xl font-bold text-gray-900">{dashboardMetrics.workHoursData.hours}</span>
                <div className="bg-green-100 text-green-700 text-xs font-semibold px-2 py-1 rounded-full hover:bg-green-200 transition-all cursor-pointer">
                  {dashboardMetrics.workHoursData.trend}
                </div>
              </div>
              <p className="text-gray-500 text-sm mt-1">avg hours / weeks</p>
              
              <div className="mt-4 grid grid-cols-10 gap-1">
                {dashboardMetrics.workHoursData.dots.map((active, i) => (
                  <div 
                    key={i}
                    className={`w-5 h-5 rounded-full transition-all duration-200 cursor-pointer hover:scale-110 active:scale-95 ${
                      active ? 'bg-gradient-to-r from-blue-500 to-blue-600' : 'bg-gray-200'
                    }`}
                    title={active ? `Active day ${i+1}` : `Inactive day ${i+1}`}
                  />
                ))}
              </div>
              
              <div className="flex items-center gap-4 mt-3 text-xs text-gray-500">
                <div className="flex items-center gap-1">
                  <div className="w-3 h-3 rounded-full bg-gradient-to-r from-blue-500 to-blue-600"></div>
                  <span>Active hours</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-3 h-3 rounded-full bg-gray-200"></div>
                  <span>Inactive hours</span>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Team Distribution Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg font-bold text-gray-900">Team Distribution</CardTitle>
            </CardHeader>
            <CardContent className="p-0 pt-2">
              <div className="grid grid-cols-2">
                <div 
                  className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-5 rounded-bl-3xl transition-all duration-300 hover:from-blue-600 hover:to-blue-700 cursor-pointer"
                  onClick={() => {
                    // Filter onsite employees and show in modal
                    const activeEmployees = employees && Array.isArray(employees) ? employees.filter(emp => emp.isActive) : [];
                    const onsiteEmployees = activeEmployees.filter(emp => 
                      emp.department !== 'Remote' && emp.department !== 'Work From Home'
                    );
                    setTeamModalData({
                      title: 'Onsite Team Members',
                      employees: onsiteEmployees
                    });
                    setTeamModalOpen(true);
                  }}
                >
                  <div className="flex items-center justify-between mb-2">
                    <Users className="w-5 h-5" />
                    <div className="bg-white/20 text-white text-xs font-semibold px-2 py-1 rounded-full hover:bg-white/30 transition-all duration-200">
                      {dashboardMetrics.teamDistribution.onsiteTrend}
                    </div>
                  </div>
                  <div className="text-3xl font-bold mt-2">{dashboardMetrics.teamDistribution.onsitePercentage}%</div>
                  <div className="text-white/80 text-sm mt-1">Onsite team</div>
                </div>
                
                <div 
                  className="bg-white p-5 rounded-br-3xl transition-all duration-300 hover:bg-gray-50 cursor-pointer"
                  onClick={() => {
                    // Filter remote employees and show in modal
                    const activeEmployees = employees && Array.isArray(employees) ? employees.filter(emp => emp.isActive) : [];
                    const remoteEmployees = activeEmployees.filter(emp => 
                      emp.department === 'Remote' || emp.department === 'Work From Home'
                    );
                    setTeamModalData({
                      title: 'Remote Team Members',
                      employees: remoteEmployees
                    });
                    setTeamModalOpen(true);
                  }}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-blue-600">
                      <Briefcase className="w-5 h-5" />
                    </div>
                    <div className="bg-green-100 text-green-700 text-xs font-semibold px-2 py-1 rounded-full hover:bg-green-200 transition-all duration-200 cursor-pointer">
                      {dashboardMetrics.teamDistribution.remoteTrend}
                    </div>
                  </div>
                  <div className="text-3xl font-bold text-gray-800 mt-2">{dashboardMetrics.teamDistribution.remotePercentage}%</div>
                  <div className="text-gray-500 text-sm mt-1">Remote team</div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Employee Profile Card */}
          <EmployeeProfileCard />
        </div>
        
        {/* Center Column - Hiring Stats and Quick Actions */}
        <div className="lg:col-span-1 space-y-6">
          {/* Hiring Statistics Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <span className="text-lg font-bold text-gray-900">Hiring Statistics</span>
                <div className="dropdown-container relative">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      setHiringStatsDropdownOpen(!hiringStatsDropdownOpen);
                    }}
                    className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1 transition-all duration-200"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </button>
                  
                  {/* Dropdown Menu */}
                  {hiringStatsDropdownOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10 border border-gray-200">
                      <button 
                        onClick={() => {
                          setHiringStatsDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        View All
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-green-500 to-green-600 flex items-center justify-center">
                    <Users className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">{dashboardMetrics.hiringStats.matched}</p>
                    <p className="text-gray-500 text-sm">Matched</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-red-500 to-red-600 flex items-center justify-center">
                    <Users className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">{dashboardMetrics.hiringStats.unmatched}</p>
                    <p className="text-gray-500 text-sm">Unmatched</p>
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-2">
                {dashboardMetrics.hiringStats.candidates.map((avatar, index) => (
                  <div key={index} className="w-12 h-12 rounded-full bg-cover bg-center" style={{ backgroundImage: `url(${avatar})` }}></div>
                ))}
              </div>
            </CardContent>
          </Card>
          
          {/* Quick Actions Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg font-bold text-gray-900">Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-2 gap-4">
                <button className="flex items-center justify-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Plus className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Add Task</span>
                </button>
                <button className="flex items-center justify-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Plus className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Add Employee</span>
                </button>
                <button className="flex items-center justify-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Plus className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Add Project</span>
                </button>
                <button className="flex items-center justify-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Plus className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Add Leave</span>
                </button>
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Right Column - Salary Data and Payment Status */}
        <div className="lg:col-span-1 space-y-6">
          {/* Salary Data Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <span className="text-lg font-bold text-gray-900">Salary Data</span>
                <div className="dropdown-container relative">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      setSalaryCardDropdownOpen(!salaryCardDropdownOpen);
                    }}
                    className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1 transition-all duration-200"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </button>
                  
                  {/* Dropdown Menu */}
                  {salaryCardDropdownOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10 border border-gray-200">
                      <button 
                        onClick={() => {
                          setSalaryCardDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        View All
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 flex items-center justify-center">
                    <Briefcase className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.basicSalary}</p>
                    <p className="text-gray-500 text-sm">Basic Salary</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-green-500 to-green-600 flex items-center justify-center">
                    <Award className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.performance}</p>
                    <p className="text-gray-500 text-sm">Performance Bonus</p>
                  </div>
                </div>
              </div>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-amber-500 to-amber-600 flex items-center justify-center">
                    <Award className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.gift}</p>
                    <p className="text-gray-500 text-sm">Gift Bonus</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-cyan-500 to-cyan-600 flex items-center justify-center">
                    <Briefcase className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.total}</p>
                    <p className="text-gray-500 text-sm">Total Salary</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Payment Status Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <span className="text-lg font-bold text-gray-900">Payment Status</span>
                <div className="dropdown-container relative">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      setPaymentStatusDropdownOpen(!paymentStatusDropdownOpen);
                    }}
                    className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1 transition-all duration-200"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </button>
                  
                  {/* Dropdown Menu */}
                  {paymentStatusDropdownOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10 border border-gray-200">
                      <button 
                        onClick={() => {
                          setPaymentStatusDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        View All
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              {dashboardMetrics.paymentStatuses.map((payment, index) => (
                <div key={index} className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-2">
                    <div className="w-12 h-12 rounded-full bg-cover bg-center" style={{ backgroundImage: `url(${payment.avatar})` }}></div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">{payment.name}</p>
                      <p className="text-gray-500 text-sm">{payment.date}</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <p className="text-sm font-medium text-gray-700">${payment.amount}</p>
                    <div className={`w-12 h-12 rounded-full bg-gradient-to-r ${
                      payment.status === 'waiting' ? 'from-yellow-500 to-yellow-600' : 
                      payment.status === 'done' ? 'from-green-500 to-green-600' : 'from-red-500 to-red-600'
                    } flex items-center justify-center`}>
                      <Bell className="w-6 h-6 text-white" />
                    </div>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
                          setHiringStatsDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        View All
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-green-500 to-green-600 flex items-center justify-center">
                    <Users className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">{dashboardMetrics.hiringStats.matched}</p>
                    <p className="text-gray-500 text-sm">Matched</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-red-500 to-red-600 flex items-center justify-center">
                    <AlertCircle className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">{dashboardMetrics.hiringStats.unmatched}</p>
                    <p className="text-gray-500 text-sm">Unmatched</p>
                  </div>
                </div>
              </div>
              <div className="mt-4 grid grid-cols-3 gap-2">
                {dashboardMetrics.hiringStats.candidates.map((avatar, index) => (
                  <div key={index} className="w-12 h-12 rounded-full bg-cover bg-center" style={{ backgroundImage: `url(${avatar})` }}></div>
                ))}
              </div>
            </CardContent>
          </Card>
          
          {/* Quick Actions Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg font-bold text-gray-900">Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-2 gap-4">
                <button className="flex items-center justify-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Plus className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Add Task</span>
                </button>
                <button className="flex items-center justify-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Briefcase className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Add Employee</span>
                </button>
                <button className="flex items-center justify-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Award className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Add Reward</span>
                </button>
                <button className="flex items-center justify-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Settings className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Settings</span>
                </button>
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Right Column - Salary Data and Recent Activity */}
        <div className="lg:col-span-1 space-y-6">
          {/* Salary Data Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <span className="text-lg font-bold text-gray-900">Salary Data</span>
                <div className="dropdown-container relative">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      setSalaryCardDropdownOpen(!salaryCardDropdownOpen);
                    }}
                    className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1 transition-all duration-200"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </button>
                  
                  {/* Dropdown Menu */}
                  {salaryCardDropdownOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10 border border-gray-200">
                      <button 
                        onClick={() => {
                          setSalaryCardDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        View All
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 flex items-center justify-center">
                    <Briefcase className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.basicSalary}</p>
                    <p className="text-gray-500 text-sm">Basic Salary</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-green-500 to-green-600 flex items-center justify-center">
                    <Award className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.performance}</p>
                    <p className="text-gray-500 text-sm">Performance Bonus</p>
                  </div>
                </div>
              </div>
              <div className="mt-4 grid grid-cols-2 gap-2">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-amber-500 to-amber-600 flex items-center justify-center">
                    <Award className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.gift}</p>
                    <p className="text-gray-500 text-sm">Gift Bonus</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-cyan-500 to-cyan-600 flex items-center justify-center">
                    <Briefcase className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.total}</p>
                    <p className="text-gray-500 text-sm">Total Salary</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Recent Activity Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <span className="text-lg font-bold text-gray-900">Recent Activity</span>
                <div className="dropdown-container relative">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      setRecentActivityDropdownOpen(!recentActivityDropdownOpen);
                    }}
                    className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1 transition-all duration-200"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </button>
                  
                  {/* Dropdown Menu */}
                  {recentActivityDropdownOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10 border border-gray-200">
                      <button 
                        onClick={() => {
                          setRecentActivityDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        View All
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 flex items-center justify-center">
                    <Users className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">12</p>
                    <p className="text-gray-500 text-sm">New Tasks</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-green-500 to-green-600 flex items-center justify-center">
                    <Award className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">8</p>
                    <p className="text-gray-500 text-sm">Completed Tasks</p>
                  </div>
                </div>
              </div>
              <div className="mt-4 grid grid-cols-2 gap-2">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-amber-500 to-amber-600 flex items-center justify-center">
                    <Award className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">2</p>
                    <p className="text-gray-500 text-sm">New Employees</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-cyan-500 to-cyan-600 flex items-center justify-center">
                    <Briefcase className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">3</p>
                    <p className="text-gray-500 text-sm">New Rewards</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
                          // View hiring details - navigate to employees page with hiring filter
                          setCurrentPage('employees');
                          setHiringStatsDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        View Details
                      </button>
                      <button 
                        onClick={() => {
                          // Export hiring data - in a real app this would trigger a download
                          console.log('Exporting hiring data...');
                          // Simulate export action
                          const exportData = {
                            matched: dashboardMetrics.hiringStats.matched,
                            unmatched: dashboardMetrics.hiringStats.unmatched,
                            candidates: dashboardMetrics.hiringStats.candidates,
                            exportedAt: new Date().toISOString()
                          };
                          console.log('Exported data:', exportData);
                          setHiringStatsDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        Export Data
                      </button>
                      <button 
                        onClick={() => {
                          // Manage candidates - navigate to employees page
                          setCurrentPage('employees');
                          setHiringStatsDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        Manage Candidates
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6 pt-0">
              <h4 className="text-base font-semibold mb-3">Talent recruitment</h4>
              
              <div className="flex -space-x-2 mb-4">
                {dashboardMetrics.hiringStats.candidates.map((candidate, index) => (
                  <img 
                    key={index} 
                    src={candidate} 
                    alt="Candidate" 
                    className="w-10 h-10 rounded-full border-2 border-white shadow-sm hover:scale-110 transition-all duration-200 cursor-pointer" 
                    title={`Candidate ${index+1}`}
                  />
                ))}
                <div className="w-10 h-10 rounded-full bg-gray-100 border-2 border-white flex items-center justify-center hover:bg-gray-200 transition-all duration-200 cursor-pointer">
                  <span className="text-gray-500 text-xs font-semibold">+5</span>
                </div>
              </div>
              
              <div className="flex space-x-1 mb-2">
                {Array(dashboardMetrics.hiringStats.matched).fill(0).map((_, i) => (
                  <div key={i} className="h-4 w-3 bg-gradient-to-r from-green-400 to-green-500 rounded-sm hover:scale-110 transition-all duration-200 cursor-pointer" title={`Matched candidate ${i+1}`} />
                ))}
                {Array(dashboardMetrics.hiringStats.unmatched).fill(0).map((_, i) => (
                  <div key={i} className="h-4 w-3 bg-gradient-to-r from-red-400 to-red-500 rounded-sm hover:scale-110 transition-all duration-200 cursor-pointer" title={`Unmatched candidate ${i+1}`} />
                ))}
              </div>
              
              <div className="flex justify-between text-sm mt-2">
                <div className="text-green-600 font-semibold hover:text-green-700 transition-colors duration-200 cursor-pointer">{dashboardMetrics.hiringStats.matched} Matched</div>
                <div className="text-gray-500 hover:text-gray-700 transition-colors duration-200 cursor-pointer">{dashboardMetrics.hiringStats.unmatched} Not match</div>
              </div>
              
              <div className="flex items-center gap-2 mt-3 text-xs text-gray-500">
                <div className="flex items-center gap-1">
                  <div className="w-2 h-2 rounded-full bg-green-400"></div>
                  <span>Matched</span>
                </div>
                <div className="flex items-center gap-1">
                  <div className="w-2 h-2 rounded-full bg-gray-200"></div>
                  <span>Not match</span>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Quick Actions Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg font-bold text-gray-900">Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-2 gap-4">
                <button className="flex items-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Plus className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Add Task</span>
                </button>
                <button className="flex items-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Plus className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Add Employee</span>
                </button>
                <button className="flex items-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Plus className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Add Project</span>
                </button>
                <button className="flex items-center gap-2 px-4 py-2 bg-white rounded-xl border border-gray-200 hover:bg-gray-50 transition-colors">
                  <Plus className="w-4 h-4 text-gray-600" />
                  <span className="text-sm font-medium text-gray-700">Add Leave</span>
                </button>
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Right Column - Salary Data and Recent Activity */}
        <div className="lg:col-span-1 space-y-6">
          {/* Salary Data Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <span className="text-lg font-bold text-gray-900">Salary Data</span>
                <div className="dropdown-container relative">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      setSalaryCardDropdownOpen(!salaryCardDropdownOpen);
                    }}
                    className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1 transition-all duration-200"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </button>
                  
                  {/* Dropdown Menu */}
                  {salaryCardDropdownOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10 border border-gray-200">
                      <button 
                        onClick={() => {
                          setSalaryCardDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        View All
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 flex items-center justify-center">
                    <Briefcase className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.basicSalary}</p>
                    <p className="text-gray-500 text-sm">Basic Salary</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-green-500 to-green-600 flex items-center justify-center">
                    <Award className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.performance}</p>
                    <p className="text-gray-500 text-sm">Performance Bonus</p>
                  </div>
                </div>
              </div>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-amber-500 to-amber-600 flex items-center justify-center">
                    <Award className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.gift}</p>
                    <p className="text-gray-500 text-sm">Gift Bonus</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-cyan-500 to-cyan-600 flex items-center justify-center">
                    <Briefcase className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">${dashboardMetrics.salaryData.total}</p>
                    <p className="text-gray-500 text-sm">Total Salary</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Recent Activity Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <span className="text-lg font-bold text-gray-900">Recent Activity</span>
                <div className="dropdown-container relative">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      setRecentActivityDropdownOpen(!recentActivityDropdownOpen);
                    }}
                    className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1 transition-all duration-200"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </button>
                  
                  {/* Dropdown Menu */}
                  {recentActivityDropdownOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10 border border-gray-200">
                      <button 
                        onClick={() => {
                          setRecentActivityDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        View All
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 flex items-center justify-center">
                    <Users className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">New Employee</p>
                    <p className="text-gray-500 text-sm">John Doe</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-green-500 to-green-600 flex items-center justify-center">
                    <Award className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">Task Completed</p>
                    <p className="text-gray-500 text-sm">Project X</p>
                  </div>
                </div>
              </div>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-amber-500 to-amber-600 flex items-center justify-center">
                    <Award className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">Leave Request</p>
                    <p className="text-gray-500 text-sm">Jane Smith</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-12 h-12 rounded-full bg-gradient-to-r from-cyan-500 to-cyan-600 flex items-center justify-center">
                    <Briefcase className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-gray-900">Project Started</p>
                    <p className="text-gray-500 text-sm">Project Y</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Quick Actions */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg font-bold text-gray-900">Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="p-6 pt-2">
              <div className="grid grid-cols-2 gap-3">
                <button 
                  onClick={() => setCurrentPage('tasks')}
                  className="flex flex-col items-center justify-center p-4 bg-gradient-to-r from-blue-50 to-blue-100 rounded-2xl hover:from-blue-100 hover:to-blue-200 transition-all hover:shadow-md active:scale-95 duration-200"
                >
                  <div className="w-12 h-12 rounded-xl bg-white flex items-center justify-center mb-2 shadow-sm hover:shadow-md transition-all duration-200">
                    <CheckCircle className="w-6 h-6 text-blue-600" />
                  </div>
                  <span className="text-sm font-semibold text-gray-800">Add Task</span>
                </button>
                
                <button 
                  onClick={() => setCurrentPage('employees')}
                  className="flex flex-col items-center justify-center p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-2xl hover:from-green-100 hover:to-green-200 transition-all hover:shadow-md active:scale-95 duration-200"
                >
                  <div className="w-12 h-12 rounded-xl bg-white flex items-center justify-center mb-2 shadow-sm hover:shadow-md transition-all duration-200">
                    <User className="w-6 h-6 text-green-600" />
                  </div>
                  <span className="text-sm font-semibold text-gray-800">Add Employee</span>
                </button>
                
                <button 
                  onClick={() => setCurrentPage('projects')}
                  className="flex flex-col items-center justify-center p-4 bg-gradient-to-r from-amber-50 to-amber-100 rounded-2xl hover:from-amber-100 hover:to-amber-200 transition-all hover:shadow-md active:scale-95 duration-200"
                >
                  <div className="w-12 h-12 rounded-xl bg-white flex items-center justify-center mb-2 shadow-sm hover:shadow-md transition-all duration-200">
                    <Users className="w-6 h-6 text-amber-600" />
                  </div>
                  <span className="text-sm font-semibold text-gray-800">New Project</span>
                </button>
                
                <button 
                  onClick={() => setCurrentPage('rewards')}
                  className="flex flex-col items-center justify-center p-4 bg-gradient-to-r from-purple-50 to-purple-100 rounded-2xl hover:from-purple-100 hover:to-purple-200 transition-all hover:shadow-md active:scale-95 duration-200"
                >
                  <div className="w-12 h-12 rounded-xl bg-white flex items-center justify-center mb-2 shadow-sm hover:shadow-md transition-all duration-200">
                    <Award className="w-6 h-6 text-purple-600" />
                  </div>
                  <span className="text-sm font-semibold text-gray-800">Give Reward</span>
                </button>
              </div>
            </CardContent>
          </Card>
          
          {/* Recent Activity */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <span className="text-lg font-bold text-gray-900">Recent Activity</span>
                <div className="dropdown-container relative">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      setRecentActivityDropdownOpen(!recentActivityDropdownOpen);
                    }}
                    className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1 transition-all duration-200"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </button>
                  
                  {/* Dropdown Menu */}
                  {recentActivityDropdownOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10 border border-gray-200">
                      <button 
                        onClick={() => {
                          // View all activity - navigate to activity log page
                          console.log('Navigating to full activity log...');
                          // In a real app, this would navigate to a dedicated activity log page
                          setRecentActivityDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        View All Activity
                      </button>
                      <button 
                        onClick={() => {
                          // Export activity log - in a real app this would trigger a download
                          console.log('Exporting activity log...');
                          // Simulate export action
                          const activityLog = {
                            activities: [
                              { type: 'task_completed', timestamp: new Date().toISOString() },
                              { type: 'reward_received', timestamp: new Date().toISOString() },
                              { type: 'new_member', timestamp: new Date().toISOString() }
                            ],
                            exportedAt: new Date().toISOString()
                          };
                          console.log('Exported activity log:', activityLog);
                          setRecentActivityDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        Export Activity Log
                      </button>
                      <button 
                        onClick={() => {
                          // Activity settings - in a real app this would open settings
                          console.log('Opening activity settings...');
                          // Simulate settings action
                          setRecentActivityDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        Activity Settings
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6 pt-0">
              <div className="space-y-4">
                <div className="flex items-start gap-3 hover:bg-gray-50 p-2 rounded-lg transition-all duration-200 cursor-pointer">
                  <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center flex-shrink-0 hover:bg-blue-200 transition-all duration-200">
                    <CheckCircle className="w-4 h-4 text-blue-600" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-900">Task completed</p>
                    <p className="text-xs text-gray-500">You completed "Prepare Q3 Report" 2 hours ago</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-3 hover:bg-gray-50 p-2 rounded-lg transition-all duration-200 cursor-pointer">
                  <div className="w-8 h-8 rounded-full bg-green-100 flex items-center justify-center flex-shrink-0 hover:bg-green-200 transition-all duration-200">
                    <Award className="w-4 h-4 text-green-600" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-900">Reward received</p>
                    <p className="text-xs text-gray-500">You received a star for excellent performance</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-3 hover:bg-gray-50 p-2 rounded-lg transition-all duration-200 cursor-pointer">
                  <div className="w-8 h-8 rounded-full bg-amber-100 flex items-center justify-center flex-shrink-0 hover:bg-amber-200 transition-all duration-200">
                    <User className="w-4 h-4 text-amber-600" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-900">New team member</p>
                    <p className="text-xs text-gray-500">Sarah Johnson joined your team</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Right Column - Salary and Payment Status */}
        <div className="lg:col-span-1 space-y-6">
          {/* Salary Breakdown Card */}
          <Card className="rounded-3xl overflow-hidden bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:shadow-xl transition-all duration-300 hover:from-blue-600 hover:to-blue-700">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-bold text-white">Payout Monthly</h3>
                  <p className="text-blue-100 text-sm">Salaries and incentive</p>
                </div>
                <div className="dropdown-container relative">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      setSalaryCardDropdownOpen(!salaryCardDropdownOpen);
                    }}
                    className="text-white/70 hover:text-white hover:bg-white/20 rounded-full p-1 transition-all duration-200"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </button>
                  
                  {/* Dropdown Menu */}
                  {salaryCardDropdownOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10 border border-gray-200">
                      <button 
                        onClick={() => {
                          // View Payroll Details - navigate to payroll page
                          setCurrentPage('payroll');
                          setSalaryCardDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors duration-200"
                      >
                        View Payroll Details
                      </button>
                      <button 
                        onClick={() => {
                          // Export Data - in a real app this would trigger a download
                          console.log('Exporting payroll data...');
                          // Simulate export action
                          const exportData = {
                            salaryData: dashboardMetrics.salaryData,
                            payrollData: payrollData,
                            exportedAt: new Date().toISOString()
                          };
                          console.log('Exported data:', exportData);
                          setSalaryCardDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors duration-200"
                      >
                        Export Data
                      </button>
                      <button 
                        onClick={() => {
                          // Payroll Settings - navigate to settings page
                          setCurrentPage('settings');
                          setSalaryCardDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors duration-200"
                      >
                        Payroll Settings
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="flex items-end justify-between mb-4">
                <div>
                  <p className="text-3xl font-bold text-white">₹{dashboardMetrics.salaryData.total.toLocaleString()}</p>
                  <p className="text-blue-100 text-sm mt-1">Total payout</p>
                </div>
                <div className="bg-white/20 text-white text-xs font-semibold px-2 py-1 rounded-full hover:bg-white/30 transition-all duration-200 cursor-pointer">
                  +12.5%
                </div>
              </div>
              
              <div className="space-y-3">
                <div className="salary-component salary-component-accent">
                  <div className="flex items-center gap-2">
                    <div className="w-8 h-8 rounded-full bg-white/30 flex items-center justify-center">
                      <Briefcase className="w-4 h-4 text-white" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-white">Basic Salary</p>
                      <p className="text-xs text-blue-100">Fixed component</p>
                    </div>
                  </div>
                  <span className="font-semibold text-white">₹{dashboardMetrics.salaryData.basicSalary.toLocaleString()}</span>
                </div>
                
                <div className="salary-component salary-component-accent">
                  <div className="flex items-center gap-2">
                    <div className="w-8 h-8 rounded-full bg-white/30 flex items-center justify-center">
                      <TrendingUp className="w-4 h-4 text-white" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-white">Performance</p>
                      <p className="text-xs text-blue-100">Based on KPIs</p>
                    </div>
                  </div>
                  <span className="font-semibold text-white">₹{dashboardMetrics.salaryData.performance.toLocaleString()}</span>
                </div>
                
                <div className="salary-component salary-component-accent">
                  <div className="flex items-center gap-2">
                    <div className="w-8 h-8 rounded-full bg-white/30 flex items-center justify-center">
                      <Gift className="w-4 h-4 text-white" />
                    </div>
                    <div>
                      <p className="text-sm font-medium text-white">Gift & Rewards</p>
                      <p className="text-xs text-blue-100">Stars, butterflies, etc.</p>
                    </div>
                  </div>
                  <span className="font-semibold text-white">₹{dashboardMetrics.salaryData.gift.toLocaleString()}</span>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Payment Status Card */}
          <Card className="rounded-3xl overflow-hidden hover:shadow-md transition-all duration-300">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <span className="text-lg font-bold text-gray-900">Payment Status</span>
                <div className="dropdown-container relative">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      setPaymentStatusDropdownOpen(!paymentStatusDropdownOpen);
                    }}
                    className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1 transition-all duration-200"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </button>
                  
                  {/* Dropdown Menu */}
                  {paymentStatusDropdownOpen && (
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg py-2 z-10 border border-gray-200">
                      <button 
                        onClick={() => {
                          // View All Payments - navigate to payroll page
                          setCurrentPage('payroll');
                          setPaymentStatusDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        View All Payments
                      </button>
                      <button 
                        onClick={() => {
                          // Export Payment Data - in a real app this would trigger a download
                          console.log('Exporting payment data...');
                          // Simulate export action
                          const exportData = {
                            paymentStatuses: dashboardMetrics.paymentStatuses,
                            exportedAt: new Date().toISOString()
                          };
                          console.log('Exported payment data:', exportData);
                          setPaymentStatusDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        Export Payment Data
                      </button>
                      <button 
                        onClick={() => {
                          // Payment Settings - navigate to settings page
                          setCurrentPage('settings');
                          setPaymentStatusDropdownOpen(false);
                        }}
                        className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200"
                      >
                        Payment Settings
                      </button>
                    </div>
                  )}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6 pt-0">
              <div className="space-y-4">
                {dashboardMetrics.paymentStatuses.map((payment, index) => (
                  <div key={index} className="payment-status-item">
                    <div className="payment-status-user">
                      <img 
                        src={payment.avatar} 
                        alt={payment.name} 
                        className="payment-status-avatar" 
                      />
                      <div>
                        <div className="font-medium text-gray-900">{payment.name}</div>
                        <div className="text-xs text-gray-500">{payment.date}</div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="font-semibold text-gray-900">₹{payment.amount.toLocaleString()}</span>
                      <Badge 
                        className={`payment-status-badge payment-status-${payment.status}`}
                      >
                        {payment.status === 'waiting' ? 'Waiting' : 
                         payment.status === 'done' ? 'Done' : 'Failed'}
                      </Badge>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
      
      {/* Team Modal */}
      {teamModalOpen && (
        <div className="fixed inset-0 bg-black/50 z-[100] flex items-center justify-center p-4">
          <div className="bg-white rounded-3xl max-w-md w-full max-h-[90vh] overflow-hidden">
            <div className="p-6 border-b border-gray-200 flex items-center justify-between">
              <h2 className="text-xl font-bold text-gray-900">{teamModalData?.title || 'Team Members'}</h2>
              <button 
                onClick={() => setTeamModalOpen(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            <div className="p-6 overflow-y-auto max-h-[70vh]">
              {teamModalData?.employees && teamModalData.employees.length > 0 ? (
                <div className="space-y-4">
                  {teamModalData.employees.map((employee) => (
                    <div key={employee.id || employee.name} className="flex items-center gap-4 p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors">
                      <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 flex items-center justify-center text-white font-bold">
                        {employee.name ? employee.name.charAt(0) : 'U'}
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold text-gray-900">{employee.name || 'Unknown Employee'}</div>
                        <div className="text-sm text-gray-600">
                          {employee.subRole || 'Role not specified'} • {employee.department || 'Department not specified'}
                        </div>
                        <div className="text-xs text-gray-500">
                          Joined: {employee.joinDate ? new Date(employee.joinDate).toLocaleDateString() : 'Date not available'}
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-sm font-medium text-gray-900">
                          ₹{employee.baseSalary ? employee.baseSalary.toLocaleString() : 'N/A'}
                        </div>
                        <div className="text-xs text-gray-500">Base Salary</div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Users className="w-12 h-12 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-1">No Team Members</h3>
                  <p className="text-gray-500">There are no employees in this category.</p>
                </div>
              )}
            </div>
            <div className="p-6 border-t border-gray-200 flex justify-end">
              <button
                onClick={() => setTeamModalOpen(false)}
                className="px-4 py-2 bg-gray-100 text-gray-800 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;